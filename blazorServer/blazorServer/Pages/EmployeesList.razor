@page "/employeeslist"
@using System.Text
@using CsvHelper
@using CsvHelper.Configuration
@using blazorServer.Models
@using blazorServer.Service
@inject EmployeeService employeesservice

<NavLink class="nav-link" href="addemployee">
    <button type="button" class="btn btn-primary">Добавить одного сотрудника</button>
</NavLink>
<form @onsubmit="OnSubmit">
    <InputFile OnChange="OnInputFileChange" multiple />
    <button type="submit" class="btn btn-secondary">Импортировать @Message</button>
</form>
<h3>Сотрудники</h3>

@if (EmpObj is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Фамилия
                </th>

                <th>
                    Имя
                </th>

                <th>
                    Отчество
                </th>

                <th>
                    Дата Рождения
                </th>
                <th>
                    Паспорт серия
                </th>
                <th>
                    Паспорт номер
                </th>
                <th>
                    Компания
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in EmpObj)
            {
                <tr>
                    <td>@emp.LastName</td>
                    <td>@emp.FirstName</td>
                    <td>@emp.MiddleName</td>
                    <td>@emp.DateOfBirth</td>
                    <td>@emp.PassportSeries</td>
                    <td>@emp.PassportSeries</td>
                    <td>@emp.Company.Name</td>
                </tr>
            }
        </tbody>
    </table>
}
<button @onclick="DownloadFileFromStream" class="btn btn-dark">Экспорт таблицы в СSV</button>
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>
@code {
    List<Employee> EmpObj;
    /// <summary>
    /// Вывод сотрудников в таблицу.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        EmpObj = await Task.Run(() => employeesservice.GetAllAsync());
    }
    private async Task DownloadFileFromStream()
    {
        var employees = await employeesservice.GetAllAsync();
        string header = @"""Фамилия"",""Имя"",""Отчетсво"",""Дата рождения"",""Паспорт серия"",""Паспорт номер"",""Компания""";
        StringBuilder sb = new();
        sb.AppendLine(header);
        foreach (var item in employees)
        {
            sb.Append(string.Join(",",
                string.Format(@"""{0}""", item.LastName),
                string.Format(@"""{0}""", item.FirstName),
                string.Format(@"""{0}""", item.MiddleName),
                string.Format(@"""{0}""", item.DateOfBirth),
                string.Format(@"""{0}""", item.PassportSeries),
                string.Format(@"""{0}""", item.PassportNumber),
                string.Format(@"""{0}""", item.Company.Name)));
            sb.Append("\n");
        }

        byte[] buffer = Encoding.UTF8.GetBytes(sb.ToString());
        var result = Encoding.UTF8.GetPreamble().Concat(buffer).ToArray();
        var fileStream = new MemoryStream(result);

        var fileName = "employees.csv";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    string Message = "Файл не выбран";
    IReadOnlyList<IBrowserFile> selectedFiles;
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} выбран для импорта";
        this.StateHasChanged();
    }
    private string path = string.Empty;
    private async void OnSubmit()
    {
        foreach (var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream();
            path = $"{env.WebRootPath}\\{file.Name}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
        }
        Message = $"{selectedFiles.Count} Загружен на сервер";
        this.StateHasChanged();

        var config = new CsvConfiguration(System.Globalization.CultureInfo.InvariantCulture)
            {

                HasHeaderRecord = true,
                HeaderValidated = null,
                MissingFieldFound = null

            };
        var employees = new List<Employee>();
        using (var sr = new StreamReader(path))
        {
            using var csv = new CsvReader(sr, config);
            csv.Context.RegisterClassMap<CsvMap>();
            employees = csv.GetRecords<Employee>().ToList();
        }


        await employeesservice.CreateRangeAsync(employees);
    }
    sealed class CsvMap : CsvHelper.Configuration.ClassMap<Employee>
    {
        public CsvMap()
        {
            Map(m => m.IdEmployee).Ignore();
            Map(m => m.LastName).Index(0).Name("Фамилия");
            Map(m => m.FirstName).Index(1).Name("Имя");
            Map(m => m.MiddleName).Index(2).Name("Отчетсво");
            Map(m => m.DateOfBirth).TypeConverterOption.Format("dd.MM.yyyy hh:mm:ss");
            Map(m => m.PassportSeries).Index(4).Name("Паспорт серия");
            Map(m => m.PassportNumber).Index(5).Name("Паспорт номер");
            Map(m => m.CompanyId).Ignore();
            Map(m => m.Company.Name).Index(6).Name("Компания");
        }
    }
}
